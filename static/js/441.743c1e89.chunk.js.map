{"version":3,"file":"static/js/441.743c1e89.chunk.js","mappings":"kUAcMA,EAAS,CACbC,KAAM,CACJC,QAAS,OACTC,cAAe,SACfC,SAAU,QACVC,OAAQ,UAEVC,MAAO,CACLC,UAAW,QAEbC,MAAO,CACLC,MAAO,OACPC,aAAc,QAEhBC,OAAQ,CACNC,gBAAiB,OACjBC,MAAO,QACP,UAAW,CACTD,gBAAiB,cA8HvB,EAzHqB,WACnB,IAAME,GAAWC,EAAAA,EAAAA,MACjB,GAAgCC,EAAAA,EAAAA,UAAS,CACvCC,KAAM,GACNC,MAAO,GACPC,SAAU,KAHZ,eAAOC,EAAP,KAAiBC,EAAjB,KAKA,GAA0CL,EAAAA,EAAAA,UAAS,IAAnD,eAAOM,EAAP,KAAsBC,EAAtB,KAEMC,EAAoB,SAACC,GACzB,MAAwBA,EAAEC,OAAlBT,EAAR,EAAQA,KAAMU,EAAd,EAAcA,MACdN,GAAY,kBACPD,GADM,cAERH,EAAOU,IAEX,EAwCD,OACE,kBAAMC,MAAO5B,EAAOC,KAAM4B,SAnCP,SAACJ,GACpBA,EAAEK,iBAEF,IAAQb,EAA0BG,EAA1BH,KAAMC,EAAoBE,EAApBF,MAAOC,EAAaC,EAAbD,SAEhBF,GAASC,GAAUC,GATF,SAACA,GACvB,MAAO,yCAAyCY,KAAKZ,EACtD,CAYMa,CAAgBb,GACnBI,EACE,0JAKJT,GAASmB,EAAAA,EAAAA,IAASb,IACfc,SACAC,MAAK,SAACC,GACLC,EAAAA,OAAAA,QAAA,UAAkBD,EAAsBE,KAAKrB,KAA7C,aACD,IACAsB,OAAM,WACLF,EAAAA,OAAAA,QAAe,2BAChB,IAEHhB,EAAY,CACVJ,KAAM,GACNC,MAAO,GACPC,SAAU,KAEZI,EAAiB,KAzBfc,EAAAA,OAAAA,QAAe,0BA0BlB,EAGmDG,aAAa,MAA/D,WACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,OAAOf,MAAO5B,EAAOM,MAAzC,SAAgD,UAGhD,SAACsC,EAAA,EAAD,CACEC,GAAG,OACHC,KAAK,OACL7B,KAAK,OACL8B,QAAQ,yHACRC,MAAM,yIACNC,YAAY,iBACZC,UAAQ,EACRtB,MAAO5B,EAAOQ,MACdmB,MAAOP,EAASH,KAChBkC,SAAU3B,QAGd,UAACiB,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQf,MAAO5B,EAAOM,MAA1C,SAAiD,WAGjD,SAACsC,EAAA,EAAD,CACEC,GAAG,QACHC,KAAK,QACL7B,KAAK,QACL8B,QAAQ,uEACRC,MAAM,oLACNC,YAAY,kBACZC,UAAQ,EACRtB,MAAO5B,EAAOQ,MACdmB,MAAOP,EAASF,MAChBiC,SAAU3B,QAGd,UAACiB,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,WAAWf,MAAO5B,EAAOM,MAA7C,SAAoD,cAGpD,SAACsC,EAAA,EAAD,CACEC,GAAG,WACHC,KAAK,WACL7B,KAAK,WACL8B,QAAQ,2CACRC,MAAM,wJACNC,YAAY,qBACZC,UAAQ,EACRtB,MAAO5B,EAAOQ,MACdmB,MAAOP,EAASD,SAChBgC,SAAU3B,IAEXF,IACC,SAAC8B,EAAA,EAAD,CAAYvC,MAAM,QAAlB,SAA2BS,QAG/B,SAAC+B,EAAA,EAAD,CAAQP,KAAK,SAASlB,MAAO5B,EAAOW,OAApC,SAA4C,cAG5C,SAACyC,EAAA,EAAD,WACE,SAAC,KAAD,CAASE,GAAG,SAAZ,SAAqB,+BAI5B,ECtJD,EAJiB,WACf,OAAO,SAAC,EAAD,GACR,C","sources":["components/RegisterForm/RegisterForm.jsx","Pages/Register/Register.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport {\n  FormControl,\n  InputLabel,\n  Input,\n  Button,\n  Typography,\n} from '@mui/material';\n\nimport { Notify } from 'notiflix';\nimport { NavLink } from 'react-router-dom';\n\nconst styles = {\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: '300px',\n    margin: '0 auto',\n  },\n  label: {\n    marginTop: '1rem',\n  },\n  input: {\n    width: '100%',\n    marginBottom: '1rem',\n  },\n  button: {\n    backgroundColor: 'blue',\n    color: 'white',\n    '&:hover': {\n      backgroundColor: 'darkblue',\n    },\n  },\n};\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n  });\n  const [passwordError, setPasswordError] = useState('');\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const isPasswordValid = (password) => {\n    return /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/.test(password);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const { name, email, password } = formData;\n\n    if (!name || !email || !password) {\n      Notify.failure('All fields are required');\n      return;\n    }\n\n    if (!isPasswordValid(password)) {\n      setPasswordError(\n        'Password must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters. For example TgeV23592, 3Greioct.'\n      );\n      return;\n    }\n\n    dispatch(register(formData))\n      .unwrap()\n      .then((originalPromiseResult) => {\n        Notify.success(`${originalPromiseResult.user.name} welcome!`);\n      })\n      .catch(() => {\n        Notify.failure(\"Sorry, something's wrong\");\n      });\n\n    setFormData({\n      name: '',\n      email: '',\n      password: '',\n    });\n    setPasswordError('');\n  };\n\n  return (\n    <form style={styles.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <FormControl>\n        <InputLabel htmlFor=\"name\" style={styles.label}>\n          Name\n        </InputLabel>\n        <Input\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"Enter name ...\"\n          required\n          style={styles.input}\n          value={formData.name}\n          onChange={handleInputChange}\n        />\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor=\"email\" style={styles.label}>\n          Email\n        </InputLabel>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          name=\"email\"\n          pattern=\"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zAZ0-9-]+)*$\"\n          title=\"Email may contain letters, numbers, an apostrophe, and must be followed by '@' domain name '.' domain suffix. For example Taras@ukr.ua, adrian@gmail.com, JacobM3rcer@hotmail.com\"\n          placeholder=\"Enter email ...\"\n          required\n          style={styles.input}\n          value={formData.email}\n          onChange={handleInputChange}\n        />\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor=\"password\" style={styles.label}>\n          Password\n        </InputLabel>\n        <Input\n          id=\"password\"\n          type=\"password\"\n          name=\"password\"\n          pattern=\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$\"\n          title=\"Password must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters. For example TgeV23592, 3Greioct.\"\n          placeholder=\"Enter password ...\"\n          required\n          style={styles.input}\n          value={formData.password}\n          onChange={handleInputChange}\n        />\n        {passwordError && (\n          <Typography color=\"error\">{passwordError}</Typography>\n        )}\n      </FormControl>\n      <Button type=\"submit\" style={styles.button}>\n        Register\n      </Button>\n      <Typography>\n        <NavLink to=\"/login\">Have an account? LogIn</NavLink>\n      </Typography>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return <RegisterForm />;\n};\n\nexport default Register;\n"],"names":["styles","form","display","flexDirection","maxWidth","margin","label","marginTop","input","width","marginBottom","button","backgroundColor","color","dispatch","useDispatch","useState","name","email","password","formData","setFormData","passwordError","setPasswordError","handleInputChange","e","target","value","style","onSubmit","preventDefault","test","isPasswordValid","register","unwrap","then","originalPromiseResult","Notify","user","catch","autoComplete","FormControl","InputLabel","htmlFor","Input","id","type","pattern","title","placeholder","required","onChange","Typography","Button","to"],"sourceRoot":""}