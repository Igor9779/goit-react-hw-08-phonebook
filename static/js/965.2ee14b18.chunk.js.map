{"version":3,"file":"static/js/965.2ee14b18.chunk.js","mappings":"gOAAaA,EAAqB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAE1BC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAEvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EAEnBC,EAAuB,SAAAP,GAAK,OAAIA,EAAMQ,OAAV,E,oHCI5BC,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACtBC,GAAWC,EAAAA,EAAAA,MACXX,GAAWY,EAAAA,EAAAA,IAAYd,GAC7B,GAAwBe,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAkCA,OACF,SAACC,EAAA,EAAD,CAAOC,UAAW,EAAGC,MAAO,CAAEC,QAAS,QAAvC,UACM,kBAAMC,SAlCW,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAOF,EAAEG,OACTC,EAAWJ,EAAEG,OAAOE,SAASd,KAAKe,MAClCC,EAAaP,EAAEG,OAAOE,SAASZ,OAAOa,MAExC7B,EAAS+B,MAAK,SAACC,GAAD,OAAaA,EAAQlB,OAASa,CAA9B,IAChBM,EAAAA,OAAAA,QAAA,UAAkBN,EAAlB,4BAIE3B,EAAS+B,MAAK,SAACC,GAAD,OAAaA,EAAQhB,SAAWc,CAAhC,IAChBG,EAAAA,OAAAA,QAAA,UAAkBH,EAAlB,6BAIFpB,GAASwB,EAAAA,EAAAA,IAAW,CAAEpB,KAAMa,EAAUX,OAAQc,EAAWK,cACtDC,SACAC,MAAK,SAAAC,GACJL,EAAAA,OAAAA,QAAA,UACKK,EAAsBxB,KAD3B,mCAGD,IACAyB,OAAM,WACLN,EAAAA,OAAAA,QAAe,2BAChB,IAEHxB,IACAgB,EAAKe,QACN,EAIG,WACE,UAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,WACE,SAACF,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,UACE,SAACC,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,OACNC,QAAQ,WACRpC,KAAK,OACLqC,UAAQ,EACRC,YAAY,iBACZvB,MAAOf,EACPuC,SAAU,SAAC9B,GAAD,OAAOR,EAAQQ,EAAEG,OAAOG,MAAxB,OAGd,SAACY,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,UACE,SAACC,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,SACNC,QAAQ,WACRpC,KAAK,SACLqC,UAAQ,EACRC,YAAY,mBACZvB,MAAOb,EACPqC,SAAU,SAAC9B,GAAD,OAAON,EAAUM,EAAEG,OAAOG,MAA1B,UAIhB,SAACyB,EAAA,EAAD,CACEC,KAAK,SACLL,QAAQ,YACRM,MAAM,UACNC,WAAW,SAACC,EAAA,EAAD,IACXtC,MAAO,CAAEuC,UAAW,QALtB,SAMC,oBAMR,E,yFC/EYC,EAAmB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAI/C,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OACrCN,GAAWC,EAAAA,EAAAA,MAejB,OACE,UAACmD,EAAA,GAAD,YACE,SAACC,EAAA,EAAD,CACEC,SACE,iCACE,SAAC,IAAD,CAAUC,SAAS,QAAQ7C,MAAO,CAAE8C,YAAa,SAChDpD,KAGLqD,WACE,iCACE,SAACC,EAAA,EAAD,CAAWH,SAAS,QAAQ7C,MAAO,CAAE8C,YAAa,SACjDlD,QAIP,SAACqD,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,CAAYC,KAAK,MAAM,aAAW,SAASC,QAAS,kBA9B9BC,EA8BwDZ,OA7BlFnD,GAASgE,EAAAA,EAAAA,IAAcD,IACpBrC,SACAC,MAAK,SAAAC,GACJL,EAAAA,OAAAA,QAAA,UACKK,EAAsBxB,KAD3B,uCAGD,IACAyB,OAAM,WACLN,EAAAA,OAAAA,QAAe,2BAChB,IAVuB,IAAAwC,CA8B8B,EAApD,UACE,SAACE,EAAA,EAAD,UAjBSd,EAsBlB,ECvCYe,EAAc,WACzB,IAAM5E,GAAWY,EAAAA,EAAAA,IAAYd,GACvB+E,GAASjE,EAAAA,EAAAA,IAAYN,GACrBwE,GAAe,OAChB9E,EAAS6E,QAAO,SAAA7C,GAAO,OAAIA,EAAQlB,KAAKiE,cAAcC,SAASH,EAAxC,KAG5B,OACE,SAACI,EAAA,EAAD,UACGH,EAAgBI,KAAI,gBAAGpE,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAQ6C,EAAjB,EAAiBA,GAAjB,OACjB,SAACD,EAAD,CAA2BC,GAAIA,EAAI/C,KAAMA,EAAME,OAAQA,GAAhC6C,EADN,KAK1B,E,oBCjBYsB,EAAS,WACpB,IAAMzE,GAAWC,EAAAA,EAAAA,MACXkE,GAASjE,EAAAA,EAAAA,IAAYN,GAO3B,OACE,SAACyC,EAAA,EAAD,CACEE,MAAM,kBACNC,QAAQ,WACRF,WAAS,EACTnB,MAAOgD,EACPxB,SAXuB,SAAC,GAAkC,IACtD+B,EADqD,EAA/BC,cAAiBxD,MACfkD,cAAcO,OAC5C5E,GAAS6E,EAAAA,EAAAA,GAAkBH,GAC5B,EASGhC,YAAY,sBAGjB,ECwCD,EA/CiB,WACf,IAAM1C,GAAWC,EAAAA,EAAAA,MACXR,GAAYS,EAAAA,EAAAA,IAAYV,GACxBG,GAAQO,EAAAA,EAAAA,IAAYR,GAC1B,GAAoDS,EAAAA,EAAAA,WAAS,GAA7D,eAAO2E,EAAP,KAA2BC,EAA3B,MAEAC,EAAAA,EAAAA,YAAU,WACRhF,GAASiF,EAAAA,EAAAA,MACV,GAAE,CAACjF,IAEJ,IAAMkF,EAAkB,WACtBH,GAAsB,SAACI,GAAD,OAAWA,CAAX,GACvB,EAED,OACE,UAACC,EAAA,EAAD,YACE,UAACrD,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,WACE,SAACF,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACE,UAACkD,EAAA,EAAD,CAAKC,QAAQ,OAAOC,WAAW,SAASC,eAAe,gBAAvD,WACE,SAACC,EAAA,EAAD,CAAYjD,QAAQ,KAApB,SAAyB,cACzB,UAAC6C,EAAA,EAAD,CAAKC,QAAQ,OAAOC,WAAW,SAASG,IAAK,EAAGzC,UAAW,EAA3D,WACE,SAACwB,EAAD,KACA,SAAC7B,EAAA,EAAD,CACEJ,QAAQ,YACRM,MAAM,UACNC,WAAW,SAAC4C,EAAA,EAAD,IACX7B,QAASoB,EAJX,SAKC,yBAMP,UAACnD,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACG1C,IAAcE,IAAS,SAACiG,EAAA,EAAD,KACxB,SAAC1B,EAAD,WAGJ,SAAC2B,EAAA,EAAD,CAAOC,KAAMhB,EAAoBiB,QAASb,EAA1C,UACE,SAACG,EAAA,EAAD,WACE,SAACvF,EAAD,CAAaC,aAAcmF,UAKpC,C","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","Pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContactsList = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContactsFilter = state => state.filters;\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { selectContactsList } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nimport { TextField, Button, Grid, Paper } from '@mui/material';\nimport { Add as AddIcon } from '@mui/icons-material';\nimport { Notify } from 'notiflix';\nimport { useState } from 'react';\n\nexport const ContactForm = ({ onCloseModal }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsList);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const formName = e.target.elements.name.value;\n    const formNumber = e.target.elements.number.value;\n\n    if (contacts.some((contact) => contact.name === formName)) {\n      Notify.failure(`${formName} is already in contacts`);\n      return;\n    }\n\n    if (contacts.some((contact) => contact.number === formNumber)) {\n      Notify.failure(`${formNumber} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name: formName, number: formNumber.toString() }))\n      .unwrap()\n      .then(originalPromiseResult => {\n        Notify.success(\n          `${originalPromiseResult.name} successfully added to contacts`\n        );\n      })\n      .catch(() => {\n        Notify.failure(\"Sorry, something's wrong\");\n      });\n\n    onCloseModal();\n    form.reset();\n  };\n\n  return (\n<Paper elevation={3} style={{ padding: '20px' }}>\n      <form onSubmit={handleSubmit}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              fullWidth\n              label=\"Name\"\n              variant=\"outlined\"\n              name=\"name\"\n              required\n              placeholder=\"Enter name ...\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              fullWidth\n              label=\"Number\"\n              variant=\"outlined\"\n              name=\"number\"\n              required\n              placeholder=\"Enter number ...\"\n              value={number}\n              onChange={(e) => setNumber(e.target.value)}\n            />\n          </Grid>\n        </Grid>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<AddIcon />}\n          style={{ marginTop: '20px' }}\n        >\n          New contact\n        </Button>\n      </form>\n    </Paper>\n  );\n};\n","\nimport { useDispatch } from 'react-redux';\n\nimport { ListItem, ListItemText, ListItemSecondaryAction, IconButton } from '@mui/material';\nimport { Person as UserIcon, Phone as PhoneIcon, Delete as DeleteIcon } from '@mui/icons-material';\n\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { Notify } from 'notiflix';\n\nexport const ContactsListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = userId => {\n    dispatch(deleteContact(userId))\n      .unwrap()\n      .then(originalPromiseResult => {\n        Notify.success(\n          `${originalPromiseResult.name} successfully deleted from contacts`\n        );\n      })\n      .catch(() => {\n        Notify.failure(\"Sorry, something's wrong\");\n      });\n  };\n\n  return (\n    <ListItem key={id}>\n      <ListItemText\n        primary={\n          <>\n            <UserIcon fontSize=\"small\" style={{ marginRight: '4px' }} />\n            {name}\n          </>\n        }\n        secondary={\n          <>\n            <PhoneIcon fontSize=\"small\" style={{ marginRight: '4px' }} />\n            {number}\n          </>\n        }\n      />\n      <ListItemSecondaryAction>\n        <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => handleDeleteContact(id)}>\n          <DeleteIcon />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { List } from '@mui/material';\n\nimport {\n  selectContactsFilter,\n  selectContactsList,\n} from 'redux/contacts/selectors';\n\nimport { ContactsListItem } from '../ContactListItem/ContactListItem';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContactsList);\n  const filter = useSelector(selectContactsFilter);\n  const visibleContacts = [\n    ...contacts.filter(contact => contact.name.toLowerCase().includes(filter)),\n  ];\n\n  return (\n    <List>\n      {visibleContacts.map(({ name, number, id }) => (\n          <ContactsListItem key={id} id={id} name={name} number={number} />\n      ))}\n    </List>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { setContactsFilter } from 'redux/contacts/filtersSlice';\nimport { selectContactsFilter } from 'redux/contacts/selectors';\n\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactsFilter);\n\n  const handleChangeFilter = ({ currentTarget: { value } }) => {\n    const normalizedValue = value.toLowerCase().trim();\n    dispatch(setContactsFilter(normalizedValue));\n  };\n\n  return (\n    <TextField\n      label=\"Filter Contacts\"\n      variant=\"outlined\"\n      fullWidth\n      value={filter}\n      onChange={handleChangeFilter}\n      placeholder=\"Enter contact name\"\n    />\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport {\n  Container,\n  Typography,\n  Button,\n  Modal,\n  Grid,\n  Box,\n  CircularProgress,\n} from '@mui/material';\n\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport { Filter } from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const [isShowModalAddUser, setIsShowModalAddUser] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleOpenModal = () => {\n    setIsShowModalAddUser((prev) => !prev);\n  };\n\n  return (\n    <Container>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Typography variant=\"h4\">Contacts</Typography>\n            <Box display=\"flex\" alignItems=\"center\" gap={2} marginTop={4}>\n              <Filter />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<AddCircleIcon />}\n                onClick={handleOpenModal}\n              >\n                New Contact\n              </Button>\n            </Box>\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          {isLoading && !error && <CircularProgress />}\n          <ContactList />\n        </Grid>\n      </Grid>\n      <Modal open={isShowModalAddUser} onClose={handleOpenModal}>\n        <Box>\n          <ContactForm onCloseModal={handleOpenModal} />\n        </Box>\n      </Modal>\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContactsList","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectContactsFilter","filters","ContactForm","onCloseModal","dispatch","useDispatch","useSelector","useState","name","setName","number","setNumber","Paper","elevation","style","padding","onSubmit","e","preventDefault","form","target","formName","elements","value","formNumber","some","contact","Notify","addContact","toString","unwrap","then","originalPromiseResult","catch","reset","Grid","container","spacing","item","xs","sm","TextField","fullWidth","label","variant","required","placeholder","onChange","Button","type","color","startIcon","Add","marginTop","ContactsListItem","id","ListItem","ListItemText","primary","fontSize","marginRight","secondary","Phone","ListItemSecondaryAction","IconButton","edge","onClick","userId","deleteContact","Delete","ContactList","filter","visibleContacts","toLowerCase","includes","List","map","Filter","normalizedValue","currentTarget","trim","setContactsFilter","isShowModalAddUser","setIsShowModalAddUser","useEffect","fetchContacts","handleOpenModal","prev","Container","Box","display","alignItems","justifyContent","Typography","gap","AddCircle","CircularProgress","Modal","open","onClose"],"sourceRoot":""}